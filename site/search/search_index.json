{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Docker DevDuck Multi-Agent Workshop","text":"<p>Workshop Duration</p> <p>Approximately 1-2 hours of hands-on learning</p> <p>Welcome to a Docker DevDuck Multi-Agent workshop that will guide you through building and deploying a Multi-agent system using Docker, Google Agent Development Kit (ADK), and Cerebras AI.</p>"},{"location":"#what-youll-learn","title":"What You'll Learn","text":"<p>In this hands-on workshop, you will:</p> <ul> <li>Build and deploy a multi-agent system using Agentic Compose</li> <li>Understand how to orchestrate multiple AI agents for specialized tasks  </li> <li>Learn to integrate Cerebras AI with local models for enhanced programming assistance</li> <li>Master Docker containerization for AI agent coordination</li> <li>Explore FastAPI web interfaces for agent interaction</li> <li>Practice with real-world Node.js programming scenarios using AI agents</li> </ul>"},{"location":"#workshop-structure","title":"Workshop Structure","text":"<p>This workshop consists of both theoretical concepts and practical exercises designed to give you hands-on experience with:</p>"},{"location":"#agent-orchestration","title":"\ud83c\udfbc Agent Orchestration","text":"<p>Learn how Docker Compose coordinates multiple AI agents in a unified system.</p>"},{"location":"#multi-agent-communication","title":"\ud83e\udd16 Multi-Agent Communication","text":"<p>Understanding inter-agent messaging and intelligent request routing.</p>"},{"location":"#local-and-cloud-ai-integration","title":"\ud83d\udcbb Local and Cloud AI Integration","text":"<p>Combining local models with Cerebras cloud services for optimal performance.</p>"},{"location":"#web-interface-development","title":"\ud83c\udf10 Web Interface Development","text":"<p>Building user-friendly interfaces for seamless agent interaction.</p>"},{"location":"#real-world-applications","title":"Real-world Applications","text":"<p>Throughout this workshop, you'll work with practical Node.js development assistance scenarios that demonstrate the power of coordinated AI agents in software development:</p> <ul> <li>Code generation and explanation</li> <li>Complex problem-solving for Node.js applications</li> <li>Project coordination and development planning  </li> <li>Code analysis and optimization suggestions</li> <li>Testing strategy development</li> <li>Educational programming assistance</li> </ul> <p>Ready to Start?</p> <p>Make sure you have reviewed the prerequisites and have your development environment ready. The next section will guide you through the necessary setup requirements.</p>"},{"location":"#github-sources","title":"GitHub Sources","text":"<p>The source code for this workshop is available at https://github.com/dockersamples/docker-cerebras-demo</p>"},{"location":"advanced-features/","title":"Advanced Features","text":"<p>Explore the advanced capabilities of your multi-agent system.</p>"},{"location":"advanced-features/#token-streaming","title":"Token Streaming","text":"<p>The system supports real-time token streaming for enhanced user experience. This feature provides:</p> <ul> <li>Immediate response feedback</li> <li>Progressive content delivery</li> <li>Better perceived performance</li> <li>Real-time interaction feel</li> </ul>"},{"location":"advanced-features/#model-configuration","title":"Model Configuration","text":"<p>The system supports flexible model configuration through Docker Compose, allowing you to:</p> <ul> <li>Swap different models for each agent</li> <li>Adjust model parameters</li> <li>Configure API endpoints</li> <li>Modify agent prompts and behaviors</li> </ul> <p>Coming Soon</p> <p>More advanced features and configuration options will be documented here.</p>"},{"location":"agent-routing/","title":"Agent Routing","text":"<p>Master the art of directing conversations to specific agents.</p>"},{"location":"agent-routing/#exercise-agent-navigation","title":"Exercise: Agent Navigation","text":"<p>Practice directing conversations to specific agents:</p> <ol> <li>Direct communication to Local Agent:</li> </ol> <pre><code>I want to speak with Local Agent\n</code></pre> <ol> <li>Switch to Cerebras:</li> </ol> <pre><code>I want to speak with Cerebras\n</code></pre> <ol> <li>Return to coordinator:</li> </ol> <pre><code>go back to devduck\n</code></pre> <p>Expected Outcome: The system should seamlessly route your requests to the appropriate agents.</p> <p>Coming Soon</p> <p>More routing exercises and patterns will be added to this section.</p>"},{"location":"basic-interaction/","title":"Basic Agent Interaction","text":"<p>Learn the fundamentals of interacting with your multi-agent system.</p>"},{"location":"basic-interaction/#exercise-1-first-contact","title":"Exercise 1: First Contact","text":"<p>Test basic communication with the multi-agent system:</p> <ol> <li>Open the web interface at http://0.0.0.0:8000</li> <li>Try the following sample interaction:</li> </ol> <pre><code>Hello I'm Phil\n</code></pre> <p>Expected Outcome: DevDuck should respond and introduce the system capabilities.</p> <p>Coming Soon</p> <p>More interactive exercises will be added to this section.</p>"},{"location":"best-practices/","title":"Best Practices","text":"<p>Production-ready practices for multi-agent systems.</p>"},{"location":"best-practices/#development-workflow","title":"Development Workflow","text":"<ol> <li>Start Simple: Begin with basic queries to understand agent capabilities</li> <li>Progressive Complexity: Gradually increase task complexity as you learn the system</li> <li>Agent Specialization: Use Local Agent for standard tasks, Cerebras for complex analysis</li> <li>Context Management: Be clear about what you want each agent to focus on</li> </ol>"},{"location":"best-practices/#performance-optimization","title":"Performance Optimization","text":"<ol> <li>Resource Management: Monitor container resource usage</li> <li>Network Efficiency: Keep agents and compose services on the same network</li> <li>Caching: Leverage Docker layer caching for faster rebuilds</li> <li>Scaling: Consider horizontal scaling for high-demand scenarios</li> </ol>"},{"location":"best-practices/#security-considerations","title":"Security Considerations","text":"<ol> <li>API Key Protection: Never commit API keys to version control</li> <li>Network Isolation: Use Docker networks for secure inter-agent communication</li> <li>Access Control: Implement proper authentication for production deployments</li> <li>Regular Updates: Keep dependencies and base images updated</li> </ol> <p>Coming Soon</p> <p>More best practices and production guidelines will be added to this section.</p>"},{"location":"cerebras-analysis/","title":"Cerebras Analysis","text":"<p>Leverage Cerebras for advanced code analysis and complex problem-solving.</p>"},{"location":"cerebras-analysis/#exercise-advanced-analysis","title":"Exercise: Advanced Analysis","text":"<p>Use Cerebras for complex code analysis:</p> <ol> <li>After generating code with Local Agent, request analysis:</li> </ol> <pre><code>Cerebras can you analyse and comment this code\n</code></pre> <ol> <li>Request test generation:</li> </ol> <pre><code>Can you generate the tests\n</code></pre> <p>Expected Outcome: Cerebras should provide detailed analysis and comprehensive test cases.</p> <p>Coming Soon</p> <p>More advanced analysis exercises will be added to this section.</p>"},{"location":"deployment/","title":"Deployment","text":"<p>Production deployment strategies and configurations.</p> <p>Coming Soon</p> <p>This section will cover deployment best practices and production configurations.</p>"},{"location":"environment-setup/","title":"Environment Setup","text":"<p>Detailed environment configuration and setup instructions.</p> <p>Coming Soon</p> <p>This section will cover advanced environment configuration options.</p>"},{"location":"getting-started/","title":"Getting Started","text":"<p>Now that you understand the system architecture, let's get your hands dirty! This section will guide you through the complete setup process, from cloning the repository to accessing your first multi-agent system.</p> <p>Estimated Time</p> <p>15-20 minutes for complete setup</p>"},{"location":"getting-started/#step-1-repository-setup","title":"Step 1: Repository Setup","text":"<p>First, let's clone the repository and navigate to the project directory:</p> <pre><code># Clone the Docker Cerebras demo repository\ngit clone https://github.com/dockersamples/docker-cerebras-demo.git\n\n# Navigate to the project directory\ncd docker-cerebras-demo\n\n# List the contents to familiarize yourself\nls -la\n</code></pre>"},{"location":"getting-started/#repository-structure","title":"\ud83d\udcc1 Repository Structure","text":"<p>You should see files similar to:</p> <pre><code>\u251c\u2500\u2500 docker-compose.yml     # Main orchestration file\n\u251c\u2500\u2500 .env.sample            # Environment template\n\u251c\u2500\u2500 README.md              # Project documentation\n\u251c\u2500\u2500 devduck/              # DevDuck agent code\n\u251c\u2500\u2500 local-agent/          # Local agent code\n\u251c\u2500\u2500 cerebras-agent/       # Cerebras agent code\n\u2514\u2500\u2500 web-interface/        # FastAPI web interface\n</code></pre>"},{"location":"getting-started/#step-2-environment-configuration","title":"Step 2: Environment Configuration","text":"<p>Configure your environment variables by creating a <code>.env</code> file from the provided template:</p> <pre><code># Copy the environment template\ncp .env.sample .env\n\n# Open the .env file in your preferred editor\n# For example, using nano:\nnano .env\n\n# Or using VS Code:\ncode .env\n</code></pre>"},{"location":"getting-started/#required-environment-variables","title":"Required Environment Variables","text":"<p>Edit your <code>.env</code> file to include your Cerebras API credentials:</p> <pre><code># Cerebras API Configuration\nCEREBRAS_API_KEY=your_actual_api_key_here\nCEREBRAS_BASE_URL=https://api.cerebras.ai/v1\nCEREBRAS_CHAT_MODEL=llama-4-scout-17b-16e-instruct\n</code></pre> <p>API Key Setup</p> <p>Replace <code>your_actual_api_key_here</code> with your actual Cerebras API key obtained from https://cloud.cerebras.ai/</p>"},{"location":"getting-started/#step-3-system-deployment","title":"Step 3: System Deployment","text":"<p>Now let's deploy the complete multi-agent system using Docker Compose:</p>"},{"location":"getting-started/#initial-deployment","title":"Initial Deployment","text":"<pre><code># Deploy all services\ndocker compose up\n\n# Or run in detached mode (background)\ndocker compose up -d\n</code></pre> <p>First Run Notes</p> <ul> <li>The first deployment may take several minutes as Docker downloads required images</li> <li>Local models will be downloaded and cached automatically</li> <li>You'll see startup logs for all three agents</li> </ul>"},{"location":"getting-started/#development-deployment","title":"Development Deployment","text":"<p>If you make changes to the code and need to rebuild:</p> <pre><code># Rebuild and deploy with code changes\ndocker compose up --build\n\n# Force recreation of containers\ndocker compose up --build --force-recreate\n</code></pre>"},{"location":"getting-started/#step-4-verify-deployment","title":"Step 4: Verify Deployment","text":""},{"location":"getting-started/#check-service-status","title":"Check Service Status","text":"<pre><code># Check if all services are running\ndocker compose ps\n\n# View logs for all services\ndocker compose logs\n\n# View logs for a specific service\ndocker compose logs devduck\ndocker compose logs local-agent\ndocker compose logs cerebras-agent\n</code></pre>"},{"location":"getting-started/#expected-output","title":"\u2705 Expected Output","text":"<p>A successful deployment should show all services as \"Up\":</p> <pre><code>NAME                          STATUS\ndocker-cerebras-demo-devduck-1      Up\ndocker-cerebras-demo-local-agent-1  Up  \ndocker-cerebras-demo-cerebras-1     Up\ndocker-cerebras-demo-web-1          Up\n</code></pre>"},{"location":"getting-started/#network-and-resource-check","title":"Network and Resource Check","text":"<pre><code># Check resource usage\ndocker stats\n\n# Verify network connectivity\ndocker network ls\n\n# Check available disk space\ndocker system df\n</code></pre>"},{"location":"getting-started/#step-5-access-the-application","title":"Step 5: Access the Application","text":"<p>Once all services are running successfully, you can access the web interface:</p> <p>Web Interface Access</p> <p>Primary URL: http://0.0.0.0:8000</p> <p>Alternative URL: http://localhost:8000</p>"},{"location":"getting-started/#first-access-verification","title":"First Access Verification","text":"<ol> <li>Open your web browser</li> <li>Navigate to <code>http://0.0.0.0:8000</code></li> <li>You should see the multi-agent interface</li> <li>Try typing a simple message like \"Hello\"</li> <li>Verify that DevDuck responds appropriately</li> </ol>"},{"location":"getting-started/#quick-health-check","title":"Quick Health Check","text":"<p>Let's perform a quick system health check to ensure everything is working:</p>"},{"location":"getting-started/#system-health-checklist","title":"\ud83c\udfe5 System Health Checklist","text":"<ul> <li> All Docker containers are running</li> <li> Web interface loads at http://0.0.0.0:8000</li> <li> DevDuck agent responds to simple messages</li> <li> No error messages in container logs</li> <li> System resources are not maxed out</li> </ul>"},{"location":"getting-started/#troubleshooting-common-issues","title":"Troubleshooting Common Issues","text":""},{"location":"getting-started/#port-already-in-use","title":"\u26a0\ufe0f Port Already in Use","text":"<p>If port 8000 is already in use:</p> <pre><code># Find what's using port 8000\nlsof -i :8000\n\n# Or modify docker-compose.yml to use a different port\n# Change \"8000:8000\" to \"8001:8000\" in the ports section\n</code></pre>"},{"location":"getting-started/#cerebras-api-issues","title":"\ud83d\udeab Cerebras API Issues","text":"<p>If Cerebras agent fails to start:</p> <ul> <li>Verify your API key is correct in the .env file</li> <li>Check internet connectivity</li> <li>Ensure your Cerebras account has API access</li> </ul> <p>Congratulations!</p> <p>You've successfully deployed your multi-agent system. In the next section, we'll start with hands-on exercises to explore the capabilities of each agent.</p>"},{"location":"local-agent/","title":"Local Agent Tasks","text":"<p>Master the Local Agent for Node.js development tasks.</p>"},{"location":"local-agent/#exercise-local-agent-programming","title":"Exercise: Local Agent Programming","text":"<p>Use the Local Agent for basic Node.js development:</p> <ol> <li>Request a simple Node.js program:</li> </ol> <pre><code>Local Agent generate a Node.js hello world program\n</code></pre> <ol> <li>Enhance the program:</li> </ol> <pre><code>Add a Person class with a greet method\n</code></pre> <p>Expected Outcome: The Local Agent should generate clean, functional Node.js code.</p> <p>Coming Soon</p> <p>More programming exercises will be added to this section.</p>"},{"location":"next-steps/","title":"Next Steps","text":"<p>Continue your journey with multi-agent systems.</p>"},{"location":"next-steps/#extending-the-system","title":"Extending the System","text":"<p>After completing this workshop, consider:</p> <ol> <li>Adding New Agents: Integrate additional specialized agents for specific domains</li> <li>Custom Models: Experiment with different local and cloud models</li> <li>Enhanced UI: Build more sophisticated user interfaces</li> <li>Integration: Connect with external development tools and IDEs</li> <li>Monitoring: Implement comprehensive logging and monitoring solutions</li> </ol>"},{"location":"next-steps/#learning-resources","title":"Learning Resources","text":"<ul> <li>Docker Documentation</li> <li>Google Agent Development Kit</li> <li>Cerebras AI Documentation</li> <li>FastAPI Documentation</li> </ul>"},{"location":"next-steps/#conclusion","title":"Conclusion","text":"<p>Congratulations! You've successfully built and deployed a sophisticated multi-agent system using Docker, Cerebras AI, and local models. This workshop demonstrated how containerization can simplify the orchestration of complex AI systems while maintaining flexibility and scalability.</p> <p>The skills you've learned here can be applied to various scenarios involving AI agent coordination, microservices architecture, and cloud-native development. Continue experimenting with different configurations and use cases to deepen your understanding of multi-agent systems and Docker orchestration.</p>"},{"location":"next-steps/#workshop-feedback","title":"Workshop Feedback","text":"<p>We welcome feedback and contributions to improve this workshop. Please share your experience and suggestions for enhancement.</p> <p>Coming Soon</p> <p>Additional resources and next steps will be added to this section.</p>"},{"location":"overview/","title":"System Overview","text":"<p>The Docker Cerebras demo showcases a sophisticated multi-agent system designed for Node.js programming assistance. Understanding the architecture and components will help you make the most of this workshop.</p>"},{"location":"overview/#system-architecture","title":"System Architecture","text":"<p>Multi-Agent Architecture</p> <p>The system consists of three specialized agents orchestrated through Docker Compose, each with distinct roles and capabilities for comprehensive programming assistance.</p>"},{"location":"overview/#agent-roles-and-responsibilities","title":"Agent Roles and Responsibilities","text":""},{"location":"overview/#devduck-the-coordinator","title":"\ud83e\udd86 DevDuck - The Coordinator","text":"<ul> <li>Model: Jan-Nano (hf.co/menlo/jan-nano-gguf:q4_k_m)</li> <li>Role: Main development assistant and project coordinator</li> <li>Capabilities: Routes requests to appropriate sub-agents based on user needs</li> <li>Function: Acts as the central hub for user interactions</li> </ul>"},{"location":"overview/#local-agent-development-expert","title":"\ud83d\udcbb Local Agent - Development Expert","text":"<ul> <li>Model: Lucy (hf.co/menlo/lucy-gguf:q8_0)</li> <li>Role: General development tasks and project coordination</li> <li>Specialization: Node.js programming expert for understanding code, explaining concepts, and generating code snippets</li> <li>Function: Handles standard development queries and code generation</li> </ul>"},{"location":"overview/#cerebras-agent-advanced-computing","title":"\ud83e\udde0 Cerebras Agent - Advanced Computing","text":"<ul> <li>Model: Llama-4 Scout (llama-4-scout-17b-16e-instruct)</li> <li>Provider: Cerebras API</li> <li>Specialization: Complex Node.js problem-solving scenarios requiring advanced reasoning</li> <li>Function: Handles complex computational tasks and advanced problem-solving</li> </ul>"},{"location":"overview/#docker-composes-central-role","title":"Docker Compose's Central Role","text":"<p>Docker Compose serves as the backbone of this multi-agent system:</p>"},{"location":"overview/#service-orchestration","title":"\ud83d\ude80 Service Orchestration","text":"<ul> <li>Manages the lifecycle of all three agents</li> <li>Handles startup and shutdown sequences  </li> <li>Ensures proper dependency management</li> </ul>"},{"location":"overview/#configuration-management","title":"\u2699\ufe0f Configuration Management","text":"<ul> <li>Defines agent prompts and behaviors</li> <li>Manages model configurations</li> <li>Sets service dependencies</li> </ul>"},{"location":"overview/#network-coordination","title":"\ud83c\udf10 Network Coordination","text":"<ul> <li>Establishes secure inter-agent communication channels</li> <li>Creates isolated network environments</li> <li>Manages port mappings and exposure</li> </ul>"},{"location":"overview/#environment-management","title":"\ud83d\udd10 Environment Management","text":"<ul> <li>Handles API keys and secrets</li> <li>Manages model parameters</li> <li>Controls runtime configurations</li> </ul>"},{"location":"overview/#key-features","title":"Key Features","text":"<ol> <li> <p>Multi-agent coordination: Intelligent routing between specialized agents based on task requirements</p> </li> <li> <p>Node.js programming expertise: All agents specialize in Node.js development with comprehensive knowledge</p> </li> <li> <p>FastAPI web interface: RESTful API with intuitive web interface for seamless interaction</p> </li> <li> <p>Docker containerization: Easy deployment and scaling with Docker Compose</p> </li> <li> <p>Flexible model configuration: Support for multiple LLM providers (local and cloud) with easy configuration</p> </li> <li> <p>Token streaming: Real-time response streaming for better user experience</p> </li> </ol>"},{"location":"overview/#use-cases-and-applications","title":"Use Cases and Applications","text":"<p>This system excels in scenarios requiring:</p>"},{"location":"overview/#development-tasks","title":"\ud83d\udd27 Development Tasks","text":"<ul> <li>Code generation and explanation</li> <li>Project coordination and planning</li> <li>Code analysis and optimization</li> <li>Testing strategy development</li> </ul>"},{"location":"overview/#learning-and-support","title":"\ud83c\udf93 Learning and Support","text":"<ul> <li>Educational programming assistance</li> <li>Complex problem-solving guidance</li> <li>Best practices recommendations</li> <li>Real-time programming help</li> </ul>"},{"location":"overview/#workshop-journey","title":"Workshop Journey","text":""},{"location":"overview/#whats-next","title":"What's Next?","text":"<p>In the following sections, you'll:</p> <ol> <li>Set up the complete development environment</li> <li>Deploy the multi-agent system using Docker Compose</li> <li>Learn to interact with each agent effectively</li> <li>Practice real-world programming scenarios</li> <li>Explore advanced features and customization options</li> </ol>"},{"location":"prerequisites/","title":"Prerequisites","text":"<p>Before starting this workshop, ensure you have the following requirements met. This will ensure a smooth learning experience and prevent setup issues during the workshop.</p> <p>Important</p> <p>Please complete all prerequisite setup before beginning the hands-on exercises. Missing requirements may prevent proper system functionality.</p>"},{"location":"prerequisites/#system-requirements","title":"System Requirements","text":""},{"location":"prerequisites/#docker-installation","title":"Docker Installation","text":"<p>Required Docker Versions</p> <ul> <li>Docker Desktop 4.43.0+ or Docker Engine (latest stable)</li> <li>For Linux with Docker Engine: Docker Compose 2.38.1 or later</li> </ul> <p>Download Links</p> <ul> <li>Docker Desktop</li> <li>Docker Engine</li> </ul>"},{"location":"prerequisites/#hardware-requirements","title":"Hardware Requirements","text":"<p>GPU Support (Recommended)</p> <ul> <li>A laptop or workstation with a GPU (e.g., MacBook, NVIDIA GPU)</li> <li>Required for running local AI models efficiently</li> </ul> <p>Alternative</p> <p>If you don't have a GPU, you can use Docker Offload for cloud-based model execution.</p>"},{"location":"prerequisites/#platform-specific-setup","title":"Platform-Specific Setup","text":"Linux / WindowsmacOS <p>For Docker Engine on Linux or Docker Desktop on Windows:</p> <ul> <li>Ensure GPU support is enabled</li> <li>Install necessary GPU drivers  </li> <li>Verify Docker Model Runner requirements</li> </ul> <p>Docker Desktop on macOS with Apple Silicon:</p> <ul> <li>Built-in GPU acceleration support</li> <li>Optimized for M1/M2/M3 chips</li> <li>No additional driver setup required</li> </ul>"},{"location":"prerequisites/#enable-docker-model-runner","title":"Enable Docker Model Runner","text":"<p>Ensure that you've enabled Docker Model Runner using Docker Dashboard &gt; Settings &gt; AI &gt; Model Runner. Download the following models beforehand.</p> <pre><code>docker model pull hf.co/menlo/jan-nano-gguf:q4_k_m\ndocker model pull hf.co/menlo/lucy-gguf:q8_0\n</code></pre> <p>Why we choose these models</p> <p>These models implement a tiered intelligence architecture designed for optimal performance and resource efficiency.</p> <p>Jan-Nano is specifically designed and optimized to work seamlessly with Model Context Protocol (MCP) servers, enabling efficient   integration with various research tools and data sources JanJan. This is perfect for a coordinator that needs to route requests to different agents and tools. Routing &amp; Orchestration Focus: The model excels at routing tasks, with MCP-agent providing router implementations including EmbeddingRouter for classification and Intent Classifier patterns that identify the most relevant categories for routing</p> <p>Lucy is an ideal choice for your Local Agent because its 1.7B parameter size strikes the perfect balance between capability and efficiency for local execution on consumer hardware. Built on the same Qwen3 architecture as Jan-Nano, Lucy ensures seamless compatibility within your agent ecosystem while being specifically optimized for conversational development tasks and code generation. Its compact size means lightning-fast response times for the quick Node.js queries, code explanations, and general development tasks that form the bulk of day-to-day programming work, while consuming minimal system resources. This allows Lucy to handle the high-frequency, low-complexity requests efficiently, leaving Jan-Nano free to focus on coordination decisions and Cerebras to tackle the truly complex computational challenges. The q8_0 quantization maintains excellent quality while ensuring Lucy can run smoothly locally, making it the perfect \"first responder\" agent that can instantly provide code snippets, explain concepts, and handle routine development questions without the latency or cost of cloud API calls.</p>"},{"location":"prerequisites/#api-requirements","title":"API Requirements","text":""},{"location":"prerequisites/#cerebras-api-access","title":"\ud83e\udde0 Cerebras API Access","text":"<p>You'll need a Cerebras API key to access advanced AI capabilities:</p> <ol> <li>Visit https://cloud.cerebras.ai/</li> <li>Create an account or sign in</li> <li>Navigate to API settings</li> <li>Generate a new API key</li> <li>Save the key securely (you'll need it during setup)</li> </ol> <p>Security Note</p> <p>Keep your API key secure and never commit it to version control. We'll show you how to use environment variables safely.</p>"},{"location":"prerequisites/#knowledge-prerequisites","title":"Knowledge Prerequisites","text":""},{"location":"prerequisites/#required-knowledge","title":"\u2705 Required Knowledge","text":"<ul> <li>Basic Docker understanding: Containers, images, and basic commands</li> <li>Command line familiarity: Running terminal/cmd commands  </li> <li>Web browser usage: Accessing web interfaces and APIs</li> </ul>"},{"location":"prerequisites/#helpful-but-not-required","title":"\ud83d\udca1 Helpful (But Not Required)","text":"<ul> <li>Node.js development: Understanding JavaScript/Node.js concepts</li> <li>REST APIs: Familiarity with API concepts and usage</li> <li>AI/ML basics: Understanding of machine learning concepts</li> <li>FastAPI/Python: Knowledge of web framework concepts</li> </ul>"},{"location":"prerequisites/#pre-workshop-checklist","title":"Pre-Workshop Checklist","text":"<ul> <li> Docker Desktop/Engine installed and running</li> <li> Docker Compose available (version 2.38.1+)</li> <li> GPU drivers installed (if using local GPU)</li> <li> Cerebras API key obtained and ready</li> <li> Internet connection available for API calls</li> <li> Text editor or IDE available for configuration</li> </ul>"},{"location":"prerequisites/#quick-verification-commands","title":"Quick Verification Commands","text":"<p>Run these commands to verify your setup:</p> <pre><code># Check Docker version\ndocker --version\n\n# Check Docker Compose version  \ndocker compose version\n\n# Test Docker functionality\ndocker run hello-world\n\n# Check available system resources\ndocker system df\n</code></pre> <p>All Set?</p> <p>If you've completed all the prerequisites, you're ready to dive into the workshop overview and understand the system architecture!</p>"},{"location":"troubleshooting/","title":"Troubleshooting","text":"<p>Common issues and their solutions.</p>"},{"location":"troubleshooting/#common-issues","title":"Common Issues","text":""},{"location":"troubleshooting/#cannot-access-web-interface","title":"Cannot Access Web Interface","text":"<ul> <li>Solution: Ensure all containers are running with <code>docker compose ps</code></li> <li>Check: Verify port 8000 is not in use by other applications</li> </ul>"},{"location":"troubleshooting/#cerebras-agent-not-responding","title":"Cerebras Agent Not Responding","text":"<ul> <li>Solution: Verify your Cerebras API key in the <code>.env</code> file</li> <li>Check: Ensure internet connectivity for Cerebras API calls</li> </ul>"},{"location":"troubleshooting/#cannot-switch-between-agents","title":"Cannot Switch Between Agents","text":"<ul> <li>Solution: Try the reset command: <code>go back to devduck</code></li> <li>Check: Wait for current agent response to complete before switching</li> </ul>"},{"location":"troubleshooting/#gpu-related-errors","title":"GPU-Related Errors","text":"<ul> <li>Solution: Verify GPU drivers are installed and Docker has GPU access</li> <li>Alternative: Use Docker Offload if no GPU is available</li> </ul>"},{"location":"troubleshooting/#health-checks","title":"Health Checks","text":"<p>Monitor system health:</p> <pre><code># Check container status\ndocker compose ps\n\n# View logs for specific services\ndocker compose logs devduck\ndocker compose logs local-agent\ndocker compose logs cerebras-agent\n\n# Check resource usage\ndocker stats\n</code></pre> <p>Coming Soon</p> <p>More troubleshooting scenarios will be added to this section.</p>"}]}